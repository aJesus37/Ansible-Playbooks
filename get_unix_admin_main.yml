---
    - name: Get users and groups in local administrators group
      hosts: linux
      gather_facts: no
      tasks:

        - name: (Re)Create empty file for storage of information
          local_action:
            module: copy
            dest: /tmp/administrators_unix_check.csv
            content: '"group","user","hostname","ip"'
          run_once: True

        - name: Set variable with common administrator groups
          set_fact:
            group_list:
              - admin
              - wheel
              - staff
              - sudo
              - sudoers

        - name: Get users in local administrators groups
          command:  awk -F':' '/{{ item }}/{print $4}' /etc/group
          register: administrators
          loop: "{{ group_list }}"

        - name: Get host's hostname
          command:  hostname
          register: hostname

        - name: Initiate empty variables
          set_fact: 
            unix_users: ""
            csv_values: ""

        - name: Add users in variable for each group
          set_fact: 
            unix_users: "{{ unix_users + ',' + administrators.results[index].stdout | regex_replace('(?:(\\w+)$)', item + ':' + '\\1' ) | regex_replace('(?:(\\w+,))', item + ':' + '\\1' ) }}"
          when: administrators.results[index].stdout != ""
          loop: "{{ group_list }}"
          loop_control:
            index_var: index

        - name: convert output to csv
          set_fact: 
            csv_values: "{{ csv_values + item | regex_replace('(?:^(\\w+):(\\w+)$)', '\"\\1\",\"\\2\",\"' + hostname.stdout + '\",\"' + inventory_hostname + '\";'   ) | string }}"
          loop: "{{ (unix_users).split(',') }}"

        - name: Remove additional semi-colon
          set_fact: 
            csv_values: "{{ (csv_values | regex_replace(';$','')).split(';') }}"

        - name: send content to file
          lineinfile:
            line: "{{ item }}"
            dest: /tmp/administrators_unix_check.csv
            insertafter: EOF
          delegate_to: localhost
          loop: "{{ csv_values }}"

        - name: Create a directory if it does not exist
          file:
            path: /tmp/playbook_results
            state: directory
          delegate_to: localhost
          run_once: True

        - name: Move result to playbook_results
          command: mv -f /tmp/administrators_unix_check.csv /tmp/playbook_results/administrators_unix_check.csv
          delegate_to: localhost
          run_once: True
